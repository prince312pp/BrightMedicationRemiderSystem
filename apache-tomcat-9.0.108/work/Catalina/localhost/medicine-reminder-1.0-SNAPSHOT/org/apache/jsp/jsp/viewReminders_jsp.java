/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.108
 * Generated at: 2025-08-28 13:32:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import com.example.model.MedicineReminder;

public final class viewReminders_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.example.model.MedicineReminder");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>Medicine Reminders</title>\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n");
      out.write("    <link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath());
      out.write("/css/styles.css\" />\n");
      out.write("    <style>\n");
      out.write("        .toast-container { position: fixed; right: 16px; bottom: 16px; display: flex; flex-direction: column; gap: 10px; z-index: 2000; }\n");
      out.write("        .toast { min-width: 260px; background: rgba(56,189,248,0.15); border:1px solid rgba(56,189,248,0.35); color:#e0f2fe; padding:12px 14px; border-radius:10px; box-shadow:0 10px 24px rgba(0,0,0,0.3); display: flex; align-items: start; gap: 10px; }\n");
      out.write("        .toast-title { font-weight: 600; margin-bottom: 4px; }\n");
      out.write("        .toast-body { font-size: 14px; color: #cdeafe; }\n");
      out.write("        .toast-close { margin-left: auto; background: transparent; border: none; color: #e0f2fe; font-size: 18px; line-height: 1; cursor: pointer; }\n");
      out.write("        .bar { display:flex; gap:10px; align-items:center; margin: 12px 0; }\n");
      out.write("        .pill { padding:6px 10px; border:1px solid rgba(255,255,255,0.15); border-radius:999px; background: rgba(255,255,255,0.06); color:#e5e7eb; cursor:pointer; }\n");
      out.write("        .pill.active { background: rgba(34,197,94,0.25); border-color: rgba(34,197,94,0.5); }\n");
      out.write("        .hint { color:#94a3b8; font-size: 13px; }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<div class=\"container\">\n");
      out.write("    <div class=\"header\">\n");
      out.write("        <div class=\"brand\">Medicine Reminder</div>\n");
      out.write("        <div class=\"nav\">\n");
      out.write("            <a href=\"view-reminders\">View Reminders</a>\n");
      out.write("            <a href=\"add-reminder\">Add Reminder</a>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <div class=\"card\">\n");
      out.write("        <h2>Your Reminders</h2>\n");
      out.write("        <div class=\"bar\">\n");
      out.write("            <button id=\"enableNotifications\" class=\"pill\">Enable Browser Notifications</button>\n");
      out.write("            <button id=\"enableSound\" class=\"pill\">Enable Sound Alarm</button>\n");
      out.write("            <span class=\"hint\">Keep this tab open to receive alerts.</span>\n");
      out.write("        </div>\n");
      out.write("        <div class=\"table-wrapper\">\n");
      out.write("            <table class=\"table\">\n");
      out.write("                <tr>\n");
      out.write("                    <th>Medicine</th>\n");
      out.write("                    <th>Dosage</th>\n");
      out.write("                    <th>Reminder Time</th>\n");
      out.write("                    <th>Next</th>\n");
      out.write("                    <th>Freq</th>\n");
      out.write("                    <th>Notes</th>\n");
      out.write("                    <th>Actions</th>\n");
      out.write("                </tr>\n");
      out.write("                ");

                    List<MedicineReminder> reminders = (List<MedicineReminder>) request.getAttribute("reminders");
                    if (reminders != null) {
                        for (MedicineReminder r : reminders) {
                
      out.write("\n");
      out.write("                <tr>\n");
      out.write("                    <td>");
      out.print( r.getMedicineName() );
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( r.getDosage() );
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( r.getReminderTime() );
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( r.getNextReminderTime() );
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( r.getFrequency() );
 if (r.getDaysOfWeek()!=null) { 
      out.write(' ');
      out.write('(');
      out.print( r.getDaysOfWeek() );
      out.write(')');
 } 
      out.write("</td>\n");
      out.write("                    <td>");
      out.print( r.getNotes() );
      out.write("</td>\n");
      out.write("                    <td>\n");
      out.write("                        <form method=\"post\" action=\"mark-taken\" style=\"display:inline;\">\n");
      out.write("                            <input type=\"hidden\" name=\"id\" value=\"");
      out.print( r.getId() );
      out.write("\"/>\n");
      out.write("                            <button class=\"btn\" type=\"submit\">Mark Taken</button>\n");
      out.write("                        </form>\n");
      out.write("                        <a class=\"btn\" href=\"update-reminder?id=");
      out.print( r.getId() );
      out.write("\">Update</a>\n");
      out.write("                        <a class=\"btn btn-danger\" href=\"delete-reminder?id=");
      out.print( r.getId() );
      out.write("\" onclick=\"return confirm('Delete this reminder?');\">Delete</a>\n");
      out.write("                    </td>\n");
      out.write("                </tr>\n");
      out.write("                ");
      }
                    }
                
      out.write("\n");
      out.write("            </table>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <div class=\"footer\">Built with Servlets, Hibernate, MySQL</div>\n");
      out.write("</div>\n");
      out.write("<div id=\"toastContainer\" class=\"toast-container\"></div>\n");
      out.write("<script>\n");
      out.write("// Helpers\n");
      out.write("function setLS(k,v){ try{ localStorage.setItem(k, JSON.stringify(v)); }catch(e){} }\n");
      out.write("function getLS(k,def){ try{ const v=localStorage.getItem(k); return v==null?def:JSON.parse(v);}catch(e){return def;} }\n");
      out.write("\n");
      out.write("// Browser Notifications toggle\n");
      out.write("const notifBtn = document.getElementById('enableNotifications');\n");
      out.write("const testBtn = document.createElement('button');\n");
      out.write("testBtn.className = 'pill';\n");
      out.write("testBtn.textContent = 'Test Notification';\n");
      out.write("notifBtn.parentElement.insertBefore(testBtn, notifBtn.nextSibling);\n");
      out.write("let notificationsEnabled = getLS('notifEnabled', false);\n");
      out.write("\n");
      out.write("function updateNotifBtn(){\n");
      out.write("  if (notificationsEnabled) { notifBtn.classList.add('active'); notifBtn.textContent='Disable Browser Notifications'; }\n");
      out.write("  else { notifBtn.classList.remove('active'); notifBtn.textContent='Enable Browser Notifications'; }\n");
      out.write("}\n");
      out.write("\n");
      out.write("function showHint(msg){\n");
      out.write("  const el = document.createElement('div');\n");
      out.write("  el.className = 'toast';\n");
      out.write("  el.textContent = msg;\n");
      out.write("  const close = document.createElement('button'); close.className = 'toast-close'; close.innerHTML='&times;'; close.onclick=()=>el.remove();\n");
      out.write("  el.appendChild(close);\n");
      out.write("  document.getElementById('toastContainer').appendChild(el);\n");
      out.write("}\n");
      out.write("\n");
      out.write("if ('Notification' in window) {\n");
      out.write("  notifBtn.onclick = () => {\n");
      out.write("    if (!notificationsEnabled) {\n");
      out.write("      if (Notification.permission !== 'granted') {\n");
      out.write("        Notification.requestPermission().then((p)=>{\n");
      out.write("          if (p === 'granted') { notificationsEnabled = true; setLS('notifEnabled', true); updateNotifBtn(); showHint('Browser notifications enabled.'); }\n");
      out.write("          else if (p === 'denied') { showHint('Notifications blocked. Allow them in your browser site settings.'); }\n");
      out.write("          else { showHint('Notification permission dismissed.'); }\n");
      out.write("        }).catch(()=> showHint('Unable to request notification permission.'));\n");
      out.write("      } else {\n");
      out.write("        notificationsEnabled = true; setLS('notifEnabled', true); updateNotifBtn(); showHint('Browser notifications enabled.');\n");
      out.write("      }\n");
      out.write("    } else {\n");
      out.write("      notificationsEnabled = false; setLS('notifEnabled', false); updateNotifBtn(); showHint('Browser notifications disabled.');\n");
      out.write("    }\n");
      out.write("  };\n");
      out.write("  testBtn.onclick = () => {\n");
      out.write("    if (!notificationsEnabled) { showHint('Enable notifications first.'); return; }\n");
      out.write("    try { new Notification('Test reminder', { body: 'This is a test notification.' }); } catch(e) { showHint('Browser blocked notification.'); }\n");
      out.write("  };\n");
      out.write("  if (Notification.permission !== 'granted') {\n");
      out.write("    if (notificationsEnabled) notificationsEnabled = false;\n");
      out.write("  }\n");
      out.write("  updateNotifBtn();\n");
      out.write("} else {\n");
      out.write("  notifBtn.disabled = true; notifBtn.title = 'Notifications not supported';\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Sound Alarm via Web Audio toggle\n");
      out.write("let soundEnabled = getLS('soundEnabled', false);\n");
      out.write("let audioCtx = null;\n");
      out.write("let playingNodes = [];\n");
      out.write("const soundBtn = document.getElementById('enableSound');\n");
      out.write("\n");
      out.write("function updateSoundBtn(){\n");
      out.write("  if (soundEnabled) { soundBtn.classList.add('active'); soundBtn.textContent='Disable Sound Alarm'; }\n");
      out.write("  else { soundBtn.classList.remove('active'); soundBtn.textContent='Enable Sound Alarm'; }\n");
      out.write("}\n");
      out.write("\n");
      out.write("soundBtn.onclick = () => {\n");
      out.write("  if (!soundEnabled) {\n");
      out.write("    try {\n");
      out.write("      if (!audioCtx) audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n");
      out.write("      if (audioCtx.state === 'suspended') { audioCtx.resume(); }\n");
      out.write("      soundEnabled = true; setLS('soundEnabled', true); updateSoundBtn();\n");
      out.write("      showHint('Sound alarm enabled.');\n");
      out.write("    } catch(e) { showHint('Unable to enable sound.'); }\n");
      out.write("  } else {\n");
      out.write("    soundEnabled = false; setLS('soundEnabled', false); updateSoundBtn();\n");
      out.write("    try { playingNodes.forEach(n=>{try{n.stop();}catch(_){}}); playingNodes = []; } catch(_){ }\n");
      out.write("    showHint('Sound alarm disabled.');\n");
      out.write("  }\n");
      out.write("};\n");
      out.write("\n");
      out.write("function playAlarm(seconds=5){\n");
      out.write("  if (!soundEnabled) return;\n");
      out.write("  if (!audioCtx) {\n");
      out.write("    try { audioCtx = new (window.AudioContext || window.webkitAudioContext)(); } catch(e) { return; }\n");
      out.write("  }\n");
      out.write("  const now = audioCtx.currentTime;\n");
      out.write("  const osc = audioCtx.createOscillator();\n");
      out.write("  const gain = audioCtx.createGain();\n");
      out.write("  osc.type = 'sine';\n");
      out.write("  osc.frequency.setValueAtTime(880, now);\n");
      out.write("  gain.gain.setValueAtTime(0.0001, now);\n");
      out.write("  for (let i=0;i<seconds;i++){\n");
      out.write("    const t = now + i*0.5;\n");
      out.write("    gain.gain.setValueAtTime(0.0001, t);\n");
      out.write("    gain.gain.linearRampToValueAtTime(0.2, t+0.05);\n");
      out.write("    gain.gain.linearRampToValueAtTime(0.0001, t+0.25);\n");
      out.write("  }\n");
      out.write("  osc.connect(gain).connect(audioCtx.destination);\n");
      out.write("  osc.start(now);\n");
      out.write("  osc.stop(now + seconds*0.5 + 0.3);\n");
      out.write("  playingNodes.push(osc);\n");
      out.write("  osc.onended = () => { playingNodes = playingNodes.filter(n=>n!==osc); };\n");
      out.write("}\n");
      out.write("\n");
      out.write("// Toasts\n");
      out.write("const toastContainer = document.getElementById('toastContainer');\n");
      out.write("let lastShownIds = new Set();\n");
      out.write("\n");
      out.write("function showToast(title, body){\n");
      out.write("  const el = document.createElement('div');\n");
      out.write("  el.className = 'toast';\n");
      out.write("  const content = document.createElement('div');\n");
      out.write("  const h = document.createElement('div'); h.className = 'toast-title'; h.textContent = title;\n");
      out.write("  const p = document.createElement('div'); p.className = 'toast-body'; p.textContent = body || '';\n");
      out.write("  const close = document.createElement('button'); close.className = 'toast-close'; close.innerHTML = '&times;';\n");
      out.write("  close.onclick = () => { toastContainer.removeChild(el); };\n");
      out.write("  content.appendChild(h); content.appendChild(p);\n");
      out.write("  el.appendChild(content); el.appendChild(close);\n");
      out.write("  toastContainer.appendChild(el);\n");
      out.write("}\n");
      out.write("\n");
      out.write("function notifyUser(title, body){\n");
      out.write("  if (notificationsEnabled && 'Notification' in window && Notification.permission === 'granted') {\n");
      out.write("    try { new Notification(title, { body }); } catch(e) { showToast(title, body); }\n");
      out.write("  } else {\n");
      out.write("    showToast(title, body);\n");
      out.write("  }\n");
      out.write("}\n");
      out.write("\n");
      out.write("function pollDue(){\n");
      out.write("  fetch('due-reminders')\n");
      out.write("    .then(r=> r.ok ? r.json() : [])\n");
      out.write("    .then(list => {\n");
      out.write("      (list || []).forEach(item => {\n");
      out.write("        const id = item.id;\n");
      out.write("        if (!lastShownIds.has(id)) {\n");
      out.write("          lastShownIds.add(id);\n");
      out.write("          const title = 'Time to take ' + item.name;\n");
      out.write("          const body = 'Dosage: ' + (item.dosage || '');\n");
      out.write("          notifyUser(title, body);\n");
      out.write("          playAlarm(6);\n");
      out.write("        }\n");
      out.write("      });\n");
      out.write("      setTimeout(()=> { lastShownIds.clear(); }, 5*60*1000);\n");
      out.write("    })\n");
      out.write("    .catch(()=>{});\n");
      out.write("}\n");
      out.write("\n");
      out.write("updateSoundBtn();\n");
      out.write("updateNotifBtn();\n");
      out.write("setInterval(pollDue, 30000);\n");
      out.write("pollDue();\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
